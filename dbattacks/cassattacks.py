from __future__ import print_function
# Attack file for Cassandra
import cassandra
from cassandra.cluster import Cluster
from termcolor import colored
import sys


def cassa_enum(target, port, db_select=False, dump=False):
    try:
        cluster = Cluster([target])
        print(colored("[-] Cassandra Server Version\n", 'blue'))
        session = cluster.connect()
        row = session.execute(
            'SELECT release_version,thrift_version from system.local')
        print(colored("[-] Release Version %s \n[-] Thrift Version %s \n" %
                      (row[0][0], row[0][1]), 'green'))
        print(colored("[-] Clusters Info \n", 'blue'))

        print(colored("[-] Listing KeySpaces", 'blue'))
        """
		dbwhole=session.cluster
		keyspac=dbwhole.metadata

		for i in keyspac.keyspaces:
			print i

		for i in keyspac.keyspaces:
			table=keyspac.keyspaces[table]
			for j in table.tables:
				col=table.tables[j]
				for c in col.columns:
					print c


		"""
        i = 0
        row = session.execute("select * from system.schema_keyspaces;")
        while i < len(row):
            print(colored("\t [-] "+row[i][0], 'green'))
            i = i+1
        #print "Would Like to Enumerate the KeySpaces (y/n)"
        # choice=raw_input()
        if db_select:
            #print colored("[-] Enter KeySpace to enumerate from ",'blue')
            keyspace = db_select
            try:
                row = session.execute("USE %s" % (keyspace))
            except cassandra.InvalidRequest:
                print(colored("[-] Invalid Keyspace \n", 'red'))
                sys.exit(0)
            table = session.execute(
                "select columnfamily_name from system.schema_columns where keyspace_name='%s'" % (keyspace))
            print(colored("[-] Table Name ", 'blue'))
            j = 0
            while j < len(table):
                print(colored("\t[-] "+table[j][0], 'green'))
                j = j+1
            column = session.execute("select * from %s" % (str(table[0][0])))
            print(colored("[-] Column Names ", 'blue'))
            for i in column[0]._fields:
                print(colored("\t[-] "+i, 'green'))
            #print colored("[-] Dump Data (y/n)",'blue')
            column.sort()
            if dump == True:
                print(
                    "---------------------------------------------------------------------")
                for i in column[0]._fields:
                    if i:
                        print(i+"\t", end=' ')
                i = 0
                print("\n")
                print(
                    "----------------------------------------------------------------------")
                while i < len(column):
                    k = 0
                    for j in column[i]:
                        if k != len(column[i])-1:
                            print(str(j)+"\t", end=' ')
                        else:
                            print("\t"+j, end=' ')
                        k = k+1
                    print("\n")
                    i = i+1
    except Exception as e:
        print(str(e))
